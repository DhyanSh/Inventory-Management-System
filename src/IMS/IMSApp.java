/*
USERNAME: NCIX
PASSWORD: ca

For the time being, above is login info
 */
package IMS;


import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.*;
import static IMS.ChangelogFunc.ChangelogFunc;
import java.util.Comparator;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Dhyan
 */
public class IMSApp extends javax.swing.JFrame {
    
 
         ResultSet rsS, rsP, rsN,rsTF,rsT, rsC, rsM, rsCON;
         String searchTerm;
         ResultSetMetaData rsmd = null;
         int i;
         db db;
         //dbEdit dbEdit;
         SetupScreen set;
      

    /**
     * Creates new form IMSApp
     */
    public IMSApp(){
        this.db = new db();
         initComponents();
         this.set = new SetupScreen(); 
         
         jTable1.setAutoCreateRowSorter(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        editButton6 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        sub1Button4 = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTextField1 = new javax.swing.JTextField();
        searchButton1 = new javax.swing.JButton();
        resetButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        addButton3 = new javax.swing.JButton();
        logButton5 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel25 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setLocationByPlatform(true);

        jPanel5.setAutoscrolls(true);

        editButton6.setText("More Info / Edit ");
        editButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButton6ActionPerformed(evt);
            }
        });

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setText("Stock");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        jLabel14.setText("In Stock:");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, -1, -1));

        jLabel15.setText("In freight:");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, -1, -1));

        jLabel17.setText("Total Sold:");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, -1, -1));

        jLabel18.setText("Shrinkage:");
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, -1, -1));

        sub1Button4.setText("Sold");
        sub1Button4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sub1Button4ActionPerformed(evt);
            }
        });
        jPanel3.add(sub1Button4, new org.netbeans.lib.awtextra.AbsoluteConstraints(97, 20, -1, 20));

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel24.setText("Description");
        jPanel3.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 0, -1, -1));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(240, 240, 240));
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jScrollPane4.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 21, 210, 130));

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Dates");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        jLabel7.setText("Last Stocked:");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 21, -1, -1));

        jLabel10.setText("yyyy/mm/dd");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 37, -1, -1));

        jLabel8.setText("Last Inventory Checked");
        jLabel8.setToolTipText("");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 57, -1, -1));

        jLabel11.setText("yyyy/mm/dd");
        jPanel4.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 77, -1, -1));

        jLabel9.setText("Last Ordered Date");
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 97, -1, -1));

        jLabel12.setText("yyyy/mm/dd");
        jPanel4.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 117, -1, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setText("Price");
        jLabel16.setToolTipText("");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel19.setText("Sell:");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 21, -1, -1));

        jLabel20.setText("Buy:");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 46, -1, -1));

        jLabel21.setText("Store:");
        jPanel2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 71, -1, -1));

        jPanel1.setAutoscrolls(true);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, -1, -1));

        jLabel4.setText("Email: ");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, -1, -1));

        jLabel3.setText("Phone:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, -1, -1));
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, 20));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setText("Manufacturer");
        jLabel1.setToolTipText("");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jLabel22.setText("Address: ");
        jPanel1.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, -1, -1));

        jLabel23.setText("Name:");
        jPanel1.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 40, 20));

        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane2.setAutoscrolls(true);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(

            new Object [][] {
            },
            new String [] {
                "Product ID", "Product Name", "Price", "Stock","Category","Sub-Category","SKU #"
            }
        )

        {public boolean isCellEditable(int row, int column) {return false;}}

    );
    jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_NEXT_COLUMN);
    jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jTable1.setDebugGraphicsOptions(javax.swing.DebugGraphics.BUFFERED_OPTION);
    jTable1.setDoubleBuffered(true);
    jTable1.setRowSorter(null);
    jTable1.setSelectionForeground(new java.awt.Color(255, 51, 51));
    jTable1.setSurrendersFocusOnKeystroke(true);
    jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTable1MouseClicked(evt);
        }
    });
    jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyPressed(java.awt.event.KeyEvent evt) {
            jTable1KeyPressed(evt);
        }
    });
    jScrollPane2.setViewportView(jTable1);

    jTreeSetup();
    jTree1.setAutoscrolls(true);
    jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTree1MouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(jTree1);

    searchButton1.setText("Search");
    searchButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            searchButton1ActionPerformed(evt);
        }
    });

    resetButton2.setText("Refresh");
    resetButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            resetButton2ActionPerformed(evt);
        }
    });

    jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product Name", "Product ID", "SKU", "Product Description", "Manufacturer" }));

    addButton3.setText("Add New Product");
    addButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            addButton3ActionPerformed(evt);
        }
    });

    logButton5.setText("Log");
    logButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            logButton5ActionPerformed(evt);
        }
    });

    jCheckBox1.setText("Limit Search to this subcategory");

    jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMS/newpackage/logo.png"))); // NOI18N
    jLabel25.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(jCheckBox1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(searchButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(resetButton2))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jScrollPane2)))
                    .addGap(15, 15, 15))
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(18, 18, 18)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(addButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(logButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 74, Short.MAX_VALUE)
                    .addComponent(jLabel25)
                    .addContainerGap())))
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(searchButton1)
                .addComponent(resetButton2)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jCheckBox1))
            .addGap(4, 4, 4)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(editButton6)
                    .addGap(18, 18, 18)
                    .addComponent(addButton3)
                    .addGap(18, 18, 18)
                    .addComponent(logButton5))
                .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING))
            .addContainerGap())
    );

    jScrollPane3.setViewportView(jPanel5);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane3)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jScrollPane3)
    );

    setSize(new java.awt.Dimension(1157, 671));
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void resetButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButton2ActionPerformed
        // This function resets the screen back to what it was when the program launched
        
        
        jTextField1.setText(null);
        jTable1.removeAll();
        //SetupScreen set = new SetupScreen();
        try {
            set.jTableSetup(db, this);
            
        } catch (SQLException ex) {
          //  Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
        }
      //  jTable1.setRowSorter(rs);
        
    }//GEN-LAST:event_resetButton2ActionPerformed

    private void searchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButton1ActionPerformed
   try {                                         
                 // This performs a search when the search button is pressed.
                 
                 //This is for variable assigments and getting data from the textbox.
                 SearchFunc search = new SearchFunc();
                 String t1 = jTextField1.getText();
                 String temp = jComboBox1.getSelectedItem().toString();
                 String col = "";
                 DefaultMutableTreeNode selectedNode;
                 
                 
                 //This if statement checks if the person is attempting an SQL Injection attack
                 //If they are, it outputs that to the terminal and ignores the entry
                 if(t1.contains(";") || t1.contains("/") || t1.contains("\\") || t1.contains("\"") || t1.contains("'") || t1.contains("{")
                         || t1.contains("}") || t1.contains("(") || t1.contains(")") || t1.contains("[") || t1.contains("]")
                         || t1.contains("%")){
                     
                 System.out.println("SQL Injection attack detected, string will be ignored.");
                 }else{
                 
                         //This finds the depth of the JTree
                         selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
                 
                 searchTerm = selectedNode.getUserObject().toString();
                 
                 //Checks if the user wants to search only within the selected category/subcategory
                 if(jCheckBox1.isSelected()){
                     
                     //Checks if the JTree is on the category level
                     if(selectedNode.getLevel()==1){
                         
                         //Searches for all subcategories in this category
                     rsT = SearchFunc2.SearchFunc2(searchTerm, "Category", "catName", db.conn);
                rsT.next();
                
                rsM = SearchFunc2.SearchFunc2(rsT.getString("catID"), "Subcategory", "catID", db.conn);
                
                //deletes the existing table
                DefaultTableModel dtm = (DefaultTableModel) this.jTable1.getModel();
                 dtm.setRowCount(0);
                 
                 //Searches all subcategories
                 while(rsM.next()){
                     rsCON = SearchFunc2.SearchFunc2(rsM.getString("subcatID"),  "Product",  "subcatID",  db.conn);
                
                     while(rsCON.next()){
                         
                         //checks the input to determine what is being searched for based on what is selected in the drop-down box, then searches
                         if(temp.equals("Product Name")){   
                     col="prodName";
                    rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Product ID")){
                     col="prodID";
                     rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("SKU")){
                     col="SKU";
                     rsS = SearchFunc2.SearchFunc2(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Product Description")){
                     col="prodDescription";
                     rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Manufacturer")){
                    rsM = SearchFunc.SearchFunc(t1, "Manufacturer", "manufacName", db.conn);
                    rsM.next();
                    t1 = rsM.getString("manufacID");
                    col="manufacID";
                    rsS = SearchFunc2.SearchFunc2(t1,  "Product",  col,  db.conn);
                 }
                         
                     while (rsS.next()) {
                         //Checks if the product found is in the subcategory we are looking in
                         if(rsS.getString("prodName").equals(rsCON.getString("prodName"))){
                             //pulls relevant data for populating table from other tables in database
                     rsP = SearchFunc2.SearchFunc2(rsS.getString("priceID"), "Price", "priceID", db.conn);
                 rsN = SearchFunc2.SearchFunc2(rsS.getString("stockID"), "Stock", "stockID", db.conn);
                 rsC = SearchFunc2.SearchFunc2(rsS.getString("subcatID"), "Subcategory", "subcatID", db.conn);
                     rsP.next();
                       rsN.next();
                       rsC.next();
                rsT = SearchFunc2.SearchFunc2(rsC.getString("catID"), "Category", "catID", db.conn);
                       rsT.next();
                       //adds a new row to the table being displayed to the user
                     dtm.addRow(new Object[] { rsS.getString(1), rsS.getString(2), rsP.getString(2), rsN.getString(2), rsT.getString("catName"), rsC.getString("subcatName"), rsS.getString("SKU")});                    
                     
                         }
                     }
                     }
                     
                 }
                 
                 //JTREE level 1 check (Category) ends, below is for JTREE level 2, Subcategory
                 }else if(selectedNode.getLevel()==2){
                         
                         //Searches subcategory 
                         rsT = SearchFunc2.SearchFunc2(searchTerm, "Subcategory", "subcatName", db.conn);
            rsT.next();
            
            rsCON = SearchFunc2.SearchFunc2(rsT.getString("subcatID"),  "Product",  "subcatID",  db.conn);
            
            DefaultTableModel dtm = (DefaultTableModel) this.jTable1.getModel();
                 dtm.setRowCount(0);
                 
                 
                
                     while(rsCON.next()){
                         
                         //checks the input to determine what is being searched for based on what is selected in the drop-down box, then searches
                  if(temp.equals("Product Name")){   
                     col="prodName";
                    rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Product ID")){
                     col="prodID";
                     rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("SKU")){
                     col="SKU";
                     rsS = SearchFunc2.SearchFunc2(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Product Description")){
                     col="prodDescription";
                     rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Manufacturer")){
                    rsM = SearchFunc.SearchFunc(t1, "Manufacturer", "manufacName", db.conn);
                    rsM.next();
                    t1 = rsM.getString("manufacID");
                    col="manufacID";
                    rsS = SearchFunc2.SearchFunc2(t1,  "Product",  col,  db.conn);
                 }
                         
                     while (rsS.next()) {
                         //Checks if the product found is in the subcategory we are looking in
                         if(rsS.getString("prodName").equals(rsCON.getString("prodName"))){
                             //pulls relevant data for populating table from other tables in database
                     rsP = SearchFunc2.SearchFunc2(rsS.getString("priceID"), "Price", "priceID", db.conn);
                 rsN = SearchFunc2.SearchFunc2(rsS.getString("stockID"), "Stock", "stockID", db.conn);
                 rsC = SearchFunc2.SearchFunc2(rsS.getString("subcatID"), "Subcategory", "subcatID", db.conn);
                     rsP.next();
                       rsN.next();
                       rsC.next();
                rsT = SearchFunc2.SearchFunc2(rsC.getString("catID"), "Category", "catID", db.conn);
                       rsT.next();
                       //adds a new row to the table being displayed to the user
                     dtm.addRow(new Object[] { rsS.getString(1), rsS.getString(2), rsP.getString(2), rsN.getString(2), rsT.getString("catName"), rsC.getString("subcatName"), rsS.getString("SKU")});                    
                     
                         }
                     }
                     }
                        //This else for if root node is selected
                     }else{
                     
                     //checks the input to determine what is being searched for based on what is selected in the drop-down box, then searches
                     if(temp.equals("Product Name")){   
                     col="prodName";
                    rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Product ID")){
                     col="prodID";
                     rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("SKU")){
                     col="SKU";
                     rsS = SearchFunc2.SearchFunc2(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Product Description")){
                     col="prodDescription";
                     rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Manufacturer")){
                    rsM = SearchFunc.SearchFunc(t1, "Manufacturer", "manufacName", db.conn);
                    rsM.next();
                    t1 = rsM.getString("manufacID");
                    col="manufacID";
                    rsS = SearchFunc2.SearchFunc2(t1,  "Product",  col,  db.conn);
                 }
            //Deletes existing table and replaces it
            DefaultTableModel dtm = (DefaultTableModel) this.jTable1.getModel();
                 dtm.setRowCount(0);
                 while (rsS.next()) {
                     //pulls relevant data for populating table from other tables in database
                     rsP = SearchFunc.SearchFunc(rsS.getString("priceID"), "Price", "priceID", db.conn);
                 rsN = SearchFunc.SearchFunc(rsS.getString("stockID"), "Stock", "stockID", db.conn);
                 rsC = SearchFunc.SearchFunc(rsS.getString("subcatID"), "Subcategory", "subcatID", db.conn);
                     rsP.next();
                       rsN.next();
                       rsC.next();
                rsM = SearchFunc.SearchFunc(rsC.getString("catID"), "Category", "catID", db.conn);
                       rsM.next();
                       
                       //adds a new row to the table being displayed to the user
                     dtm.addRow(new Object[] { rsS.getString(1), rsS.getString(2), rsP.getString(2), rsN.getString(2), rsM.getString("catName"), rsC.getString("subcatName"), rsS.getString("SKU")});    
                 }
                     
                 }
                 
                 
                 
                 //If checkbox not selected
                 }else{
                     //checks the input to determine what is being searched for based on what is selected in the drop-down box, then searches
                     if(temp.equals("Product Name")){   
                     col="prodName";
                    rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Product ID")){
                     col="prodID";
                     rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("SKU")){
                     col="SKU";
                     rsS = SearchFunc2.SearchFunc2(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Product Description")){
                     col="prodDescription";
                     rsS = SearchFunc.SearchFunc(t1,  "Product",  col,  db.conn);
                 }else if(temp.equals("Manufacturer")){
                    rsM = SearchFunc.SearchFunc(t1, "Manufacturer", "manufacName", db.conn);
                    rsM.next();
                    t1 = rsM.getString("manufacID");
                    col="manufacID";
                    rsS = SearchFunc2.SearchFunc2(t1,  "Product",  col,  db.conn);
                 }
                     
            //Deletes existing table and replaces it
            DefaultTableModel dtm = (DefaultTableModel) this.jTable1.getModel();
                 dtm.setRowCount(0);
                 while (rsS.next()) {
                     //pulls relevant data for populating table from other tables in database
                     rsP = SearchFunc.SearchFunc(rsS.getString("priceID"), "Price", "priceID", db.conn);
                 rsN = SearchFunc.SearchFunc(rsS.getString("stockID"), "Stock", "stockID", db.conn);
                 rsC = SearchFunc.SearchFunc(rsS.getString("subcatID"), "Subcategory", "subcatID", db.conn);
                     rsP.next();
                       rsN.next();
                       rsC.next();
                rsM = SearchFunc.SearchFunc(rsC.getString("catID"), "Category", "catID", db.conn);
                       rsM.next();
                       //adds a new row to the table being displayed to the user
                     dtm.addRow(new Object[] { rsS.getString(1), rsS.getString(2), rsP.getString(2), rsN.getString(2), rsM.getString("catName"), rsC.getString("subcatName"), rsS.getString("SKU")});    
                 }
                     
                 }
                 }
             } catch (SQLException ex) {
             //    Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
             }
   
   
    }//GEN-LAST:event_searchButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        int selectedRowIndex = jTable1.getSelectedRow();
        String selectedObject = (String)jTable1.getModel().getValueAt(selectedRowIndex,0);

        //SetupScreen tmp = new SetupScreen();

        try {
                jLabel2.setText("N/A");
               jLabel3.setText("Phone: N/A");
               jLabel4.setText("Email: N/A");
               jLabel5.setText("N/A");
            
            set.jLabelInfoManufac (db,this,selectedObject);
        } catch (SQLException ex) {
    //        Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            set.jLabelInfoDate (db,this,selectedObject);
        } catch (SQLException ex) {
    //        Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            set.jLabelInfoStock (db,this,selectedObject);
        } catch (SQLException ex) {
     //       Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            set.jLabelInfoPrice (db,this,selectedObject);
        } catch (SQLException ex) {
     //       Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            set.jTextDiscript (db,this,selectedObject);
        } catch (SQLException ex) {
     //       Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void editButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButton6ActionPerformed

        int selectedRowIndex = jTable1.getSelectedRow();
        String selectedObject;
        
      try {
        selectedObject = (String)jTable1.getModel().getValueAt(selectedRowIndex,0);       
              
         dbEdit dbE = new dbEdit();     
             try {
                 dbE.getdbEdit(db,selectedObject);
             } catch (SQLException ex) {
         //        Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
             }          
        } catch (Exception ex) {
     //       System.out.print(ex);
            JOptionPane.showMessageDialog(null, "No Row Selected");
        }

             try {
                 set.jTableSetup(db, this);
             } catch (SQLException ex) {
            //     Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
             }
    }//GEN-LAST:event_editButton6ActionPerformed

    private void sub1Button4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sub1Button4ActionPerformed

         ResultSet SQLrs = null;
         int temp1;
         String stOld ,stNew;  
     int selectedRowIndex = jTable1.getSelectedRow();
        String selectedObject,temp2;
       
        selectedObject = (String)jTable1.getModel().getValueAt(selectedRowIndex,0);  
            String sqlQ1 = "Select stockID"
                         + " FROM  Product"
                        + " WHERE prodID = '"+selectedObject+"'";
                 
                 String sqlQ = "Select inStock,sold"
                                    + " FROM  Stock"
                                         + " WHERE stockID = ("+sqlQ1+");";
                 try {
                     SQLrs = db.getSQL(sqlQ);
                     SQLrs.next();
                 } catch (SQLException ex) {
       //              Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 

   //        if (!stOld.equals(stNew))
   //      ChangelogFunc(selectedObject,stOld,stNew,"Price","In Stock"); 
                 
             try {
                  stOld = SQLrs.getString(1);
                stNew = new Integer(SQLrs.getInt(1)-1).toString();
                 if (!stOld.equals(stNew))
                      ChangelogFunc(selectedObject,stOld,stNew,"Price","In Stock");
                 
                stOld = SQLrs.getString(2);
                stNew = new Integer(SQLrs.getInt(1)+1).toString();
                 if (!stOld.equals(stNew))
                      ChangelogFunc(selectedObject,stOld,stNew,"Price","Sold");
                 
                 temp1 = SQLrs.getInt(1)-1;
                 temp2 = Integer.toString(temp1);
               SQLrs.updateString(1,temp2);
               
                 temp1 = SQLrs.getInt(2)+1;
                 temp2 = Integer.toString(temp1);
               SQLrs.updateString(2,temp2);
                SQLrs.updateRow();
                SQLrs.refreshRow();      
             } catch (SQLException ex) {
      //           Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
             }
             
             try {
                     SQLrs = db.getSQL(sqlQ);
                     SQLrs.next();
                jLabel14.setText("In Stock: "+SQLrs.getString(1));
              jLabel17.setText("Total Sold: "+SQLrs.getString(2));
              
                 } catch (SQLException ex) {
         //            Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
                 }
             
          
    }//GEN-LAST:event_sub1Button4ActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        // TODO add your handling code here:
                int selectedRowIndex = jTable1.getSelectedRow();
        String selectedObject = (String)jTable1.getModel().getValueAt(selectedRowIndex,0);
      
        try {
            set.jLabelInfoManufac (db,this,selectedObject);
            set.jLabelInfoDate (db,this,selectedObject);
            set.jLabelInfoStock (db,this,selectedObject);
            set.jLabelInfoPrice (db,this,selectedObject);
            set.jTextDiscript (db,this,selectedObject);
        } catch (SQLException ex) {
     //       Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
        }
      
        
    }//GEN-LAST:event_jTable1KeyPressed

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
            
            //finds the depth of the jtree
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) jTree1.getLastSelectedPathComponent();
            searchTerm = selectedNode.getUserObject().toString();
            
            //if the jtree is on the root, it resets the system to show the entire database
           if(selectedNode.getLevel() == 0){
              
                try {
                    set.jTableSetup(db, this);
                } catch (SQLException ex) {
                    Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
                }

           }
           
           //if the jtree level is one, it performs a search to find all the contents of that category
            if(selectedNode.getLevel() == 1){
            try{
                rsT = SearchFunc2.SearchFunc2(searchTerm, "Category", "catName", db.conn);
                rsT.next();     
                rsM = SearchFunc2.SearchFunc2(rsT.getString("catID"), "Subcategory", "catID", db.conn);           
                DefaultTableModel dtm = (DefaultTableModel) this.jTable1.getModel();
                 dtm.setRowCount(0);
                 while(rsM.next()){
                     rsS = SearchFunc2.SearchFunc2(rsM.getString("subcatID"),  "Product",  "subcatID",  db.conn);
                     
                     while (rsS.next()) {
                     rsP = SearchFunc2.SearchFunc2(rsS.getString("priceID"), "Price", "priceID", db.conn);
                 rsN = SearchFunc2.SearchFunc2(rsS.getString("stockID"), "Stock", "stockID", db.conn);
                 rsC = SearchFunc2.SearchFunc2(rsS.getString("subcatID"), "Subcategory", "subcatID", db.conn);
                     rsP.next();
                       rsN.next();
                       rsC.next();
                rsT = SearchFunc2.SearchFunc2(rsC.getString("catID"), "Category", "catID", db.conn);
                       rsT.next();
                     dtm.addRow(new Object[] { rsS.getString(1), rsS.getString(2), rsP.getString(2), rsN.getString(2), rsT.getString("catName"), rsC.getString("subcatName"), rsS.getString("SKU")});                    }
          
                 }           
            }catch(Exception e){
            }
         
            }
            //if it is neither the root or level one, it must be level 2, meaning it performs a search of the selected subcategory
            else{
            try{
            rsT = SearchFunc2.SearchFunc2(searchTerm, "Subcategory", "subcatName", db.conn);
            rsT.next();
           // System.out.println(rsT.getString("subcatID"));
            
            rsS = SearchFunc2.SearchFunc2(rsT.getString("subcatID"),  "Product",  "subcatID",  db.conn);
            
            DefaultTableModel dtm = (DefaultTableModel) this.jTable1.getModel();
                 dtm.setRowCount(0);
                 while (rsS.next()) {
                     rsP = SearchFunc2.SearchFunc2(rsS.getString("priceID"), "Price", "priceID", db.conn);
                 rsN = SearchFunc2.SearchFunc2(rsS.getString("stockID"), "Stock", "stockID", db.conn);
                 rsC = SearchFunc2.SearchFunc2(rsS.getString("subcatID"), "Subcategory", "subcatID", db.conn);
                     rsP.next();
                       rsN.next();
                       rsC.next();
                rsM = SearchFunc2.SearchFunc2(rsC.getString("catID"), "Category", "catID", db.conn);
                       rsM.next();
                     dtm.addRow(new Object[] { rsS.getString(1), rsS.getString(2), rsP.getString(2), rsN.getString(2), rsM.getString("catName"), rsC.getString("subcatName"), rsS.getString("SKU")});

                 }
        }catch(Exception eh){
            
        }
            }
            
            
            

    }//GEN-LAST:event_jTree1MouseClicked

    private void addButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButton3ActionPerformed
          dbEdit dbE = new dbEdit();     
             try {
                 dbE.getdbEdit(db);
             } catch (SQLException ex) {
             //    Logger.getLogger(IMSApp.class.getName()).log(Level.SEVERE, null, ex);
             }   

        // TODO add your handling code here:
        
    }//GEN-LAST:event_addButton3ActionPerformed

    private void logButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logButton5ActionPerformed
        // TODO add your handling code here:
        new log().setVisible(true);
     
        
    }//GEN-LAST:event_logButton5ActionPerformed

    /**
     * @param args the command line arguments
     *
    public static void IMS () {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         *
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IMSApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IMSApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IMSApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IMSApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form *
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                    new IMSApp().setVisible(true);

            }
        });
    }*/
    
    
    
   private void jTreeSetup (){
      
       //creates the root node of the tree and names it
     DefaultMutableTreeNode root = new DefaultMutableTreeNode("Inventory");

     
     //below creates the categories of the tree and names them according to the category names in the category table of the database
      DefaultMutableTreeNode cat1;
              cat1= new DefaultMutableTreeNode("Computer Hardware");


     DefaultMutableTreeNode cat2 = new DefaultMutableTreeNode("Laptop & Tablet");
      
     DefaultMutableTreeNode cat3 = new DefaultMutableTreeNode("Networking");
      DefaultMutableTreeNode cat4 = new DefaultMutableTreeNode("TV & Home Theatre");

      DefaultMutableTreeNode cat5 = new DefaultMutableTreeNode("Mobile Phones");
      //cat5.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat6 = new DefaultMutableTreeNode("Point of Sale");
 
     // cat6.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat7 = new DefaultMutableTreeNode("Monitors");
      //cat7.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat8 = new DefaultMutableTreeNode("Desktop");
      //cat8.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat9 = new DefaultMutableTreeNode("Accessories");
      //cat9.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat10 = new DefaultMutableTreeNode("Gadget & Toys");
     // cat10.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat11 = new DefaultMutableTreeNode("Game Consoles");
     // cat11.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat12 = new DefaultMutableTreeNode("Printers");
     // cat12.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat13 = new DefaultMutableTreeNode("LED Lighting");
     // cat13.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat14 = new DefaultMutableTreeNode("Software");
    //  cat14.add(new DefaultMutableTreeNode(""));
      
      DefaultMutableTreeNode cat15 = new DefaultMutableTreeNode("Misc. Electronics");
   //   cat15.add(new DefaultMutableTreeNode(""));
     
      //searches the entire subcategory table for all subcategory names
      rsTF= SearchFunc.SearchFunc("*",  "Subcategory",  "subcatName",  db.conn);

      try{
          
          //performs a loop to name the subcategories based on the information pulled from the search of the subcategory table
          //also adds them to their parent category
      for(i=0; i<112; i++){
         rsTF.next();
         if(i<8)
            cat1.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<16)
            cat2.add(new DefaultMutableTreeNode(rsTF.getString("subcatName"))); 
         else if(i<24)
             cat3.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<32)
             cat4.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<40)
             cat5.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<48)
             cat6.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<56)
             cat7.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<64)
             cat8.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<72)
             cat9.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<76)
             cat10.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<83)
             cat11.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<91)
             cat12.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<97)
             cat13.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<103)
             cat14.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
         else if(i<112)
             cat15.add(new DefaultMutableTreeNode(rsTF.getString("subcatName")));
          
      }
      }catch(Exception e){
                 
                 }
            
      //adds the categories to the root
        root.add(cat1);
        root.add(cat2);
        root.add(cat3);
        root.add(cat4);
        root.add(cat5);
        root.add(cat6);
        root.add(cat7);
        root.add(cat8);
        root.add(cat9);
        root.add(cat10);
        root.add(cat11);
        root.add(cat12);
        root.add(cat13);
        root.add(cat14);
        root.add(cat15);
        
    
    
        //creates the jtree
    jTree1 = new JTree(root);
    jTree1.setSelectionPath(new TreePath(root));
     
    }
    




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton3;
    private javax.swing.JButton editButton6;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    public javax.swing.JLabel jLabel10;
    public javax.swing.JLabel jLabel11;
    public javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    public javax.swing.JLabel jLabel14;
    public javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    public javax.swing.JLabel jLabel17;
    public javax.swing.JLabel jLabel18;
    public javax.swing.JLabel jLabel19;
    public javax.swing.JLabel jLabel2;
    public javax.swing.JLabel jLabel20;
    public javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    public javax.swing.JLabel jLabel3;
    public javax.swing.JLabel jLabel4;
    public javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    public javax.swing.JLabel jLabel7;
    public javax.swing.JLabel jLabel8;
    public javax.swing.JLabel jLabel9;
    public javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    public javax.swing.JTable jTable1;
    public javax.swing.JTextArea jTextArea1;
    public javax.swing.JTextField jTextField1;
    private javax.swing.JTree jTree1;
    private javax.swing.JButton logButton5;
    public javax.swing.JButton resetButton2;
    public javax.swing.JButton searchButton1;
    private javax.swing.JButton sub1Button4;
    // End of variables declaration//GEN-END:variables



}
